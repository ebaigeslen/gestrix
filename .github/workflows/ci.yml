name: CI

on:
  push:
    branches: [ main, develop, feature/**, feat/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test (${{ matrix.os }}, py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: ["3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      # Linux-only: toolchain for Fast Downward build
      - name: Install system deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential git

      - name: Upgrade pip & install pipx/poetry
        run: |
          python -m pip install --upgrade pip pipx
          pipx install poetry==2.2.1
          poetry --version

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python }}-

      - name: Cache Poetry downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: pypoetry-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            pypoetry-${{ runner.os }}-${{ matrix.python }}-

      - name: Cache virtualenv (.venv)
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python }}-

      - name: Install deps (with dev)
        run: |
          poetry install --with dev

      # Linux-only: build Fast Downward so smoke test runs
      - name: Setup Fast Downward (Linux)
        if: runner.os == 'Linux'
        run: |
          bash scripts/setup_fastdownward.sh
        # scripts/setup_fastdownward.sh writes FASTDOWNWARD_HOME to GITHUB_ENV on CI

      - name: Pre-commit (lint/format/static)
        run: |
          poetry run pre-commit run --all-files

      - name: Run tests with coverage
        run: |
          poetry run pytest -q --cov=gestrix --cov-report=xml

      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python }}
          path: coverage.xml

  docker:
    name: Build Docker image (main only)
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image
        env:
          DOCKER_BUILDKIT: "1"
        run: |
          docker build -t gestrix:ci .
